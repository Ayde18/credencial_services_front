@page "/credencial"
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<h1>Crear credencial</h1>

<div>
    <label for="servicio">Nombre del servicio:</label>
    <input @bind="servicio" id="servicio" />
</div>

<div>
    <label for="usuario">Usuario:</label>
    <input @bind="usuario" id="usuario" />
</div>

<div>
    <label for="password">Contrase√±a:</label>
    <input @bind="password" id="password" />
</div>

<button @onclick="CrearCredencial">Crear</button>

<h2>Lista de Credenciales</h2>

<ul>
    @foreach(var credencial in crendenciales) {
        <li>@credencial.servicio (@credencial.usuario)</li>
    }
</ul>

@code {
    private string servicio;
    private string usuario;
    private string password;

    private List<CredencialDto> crendenciales = new List<CredencialDto>();
    
    protected override async Task OnInitializedAsync(){

        var isAuthenticated = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "key");

        if (isAuthenticated != "true") {
            NavigationManager.NavigateTo("/accesss");
        }

        await cargarCredenciales();
    }

    private async Task CrearCredencial()
    {
        var credencial = new CredencialDto { 
            servicio = this.servicio, 
            usuario = this.usuario, 
            password = this.password 
        
        };
        var response = await HttpClient.PostAsJsonAsync("/api/credenciales", credencial);

        if (response.IsSuccessStatusCode)
        {
            await cargarCredenciales();
        }
    }

    private async Task cargarCredenciales()
    {
        var response = await HttpClient.GetFromJsonAsync<List<CredencialDto>>("/api/credenciales");
        this.crendenciales = response ?? new List<CredencialDto>();
    }

    public class CredencialDto
    {
        public string servicio { get; set; }
        public string usuario { get; set; }
        public string password { get; set; }
    }

}